{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/study/css-for-js/module-02-css-rendering-logic-2/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"centering-trick\" style=\"position:relative;\"><a href=\"#centering-trick\" aria-label=\"centering trick permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Centering Trick</h2>\n<p>특정한 조건내에서 horizontal, vertical centering을 할 수 있다.</p>\n<ol>\n<li>Absolute position</li>\n<li>각 방향 별 equl distance</li>\n<li>지정된 사이즈</li>\n<li>margin: auto</li>\n</ol>\n<p><a href=\"https://codepen.io/sundicide/pen/xxpdpQR\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/sundicide/embed/preview/xxpdpQR/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h2 id=\"stacking-context\" style=\"position:relative;\"><a href=\"#stacking-context\" aria-label=\"stacking context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stacking Context</h2>\n<p>z-index를 사용할 때 유의해야할 것으로 <code class=\"language-text\">stacking context</code>라는 개념이 있다. 그 전에 z-index에 대한 기본 logic을 살펴보자.</p>\n<p>Flow Layout에서는 기본적으로 DOM Order대로 그려진다.\n여기에 Positioned Layout 속성을 갖는 element가 생긴다면 이는 항상 non-positioned element보다 위에 그려지게 된다.\n그리고 만약 positioned layout을 갖는 element가 여러 개 있다면 이들 사이에서의 z-index 순위는 DOM order를 따른다.\n마지막으로 이들 사이의 z-index를 설정할 수 있도록 하는 값이 <code class=\"language-text\">z-index</code> 속성이다.</p>\n<p>그리고 z-index는 <code class=\"language-text\">같은 stacking context</code>내에서 동작하는데 그 말은 <code class=\"language-text\">상이한 stacking context</code>내에서는 <code class=\"language-text\">z-index</code>의 차이가 소용 없다는 뜻이다.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\">MDN - stacking context</a>내에서 예시를 보면 알 수 있다.</p>\n<h3 id=\"isolation\" style=\"position:relative;\"><a href=\"#isolation\" aria-label=\"isolation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>isolation</h3>\n<p>isolation은 new stacking context를 항상 만들어주기 때문에 요긴하게 쓸 수 있다.\n예를 들어 공통 컴포넌트를 만들려고 할 때 항상 부모 컴포넌트에 <code class=\"language-text\">z-index</code> 값을 지정하는 것이 문제가 됐었다. (z-index를 )\n하지만 이 속성을 이용해 stacking-context를 만들면 부모 컴포넌트에서는 별도의 z-index 없이 stacking context를 만들 수 있는 것이다.</p>\n<h2 id=\"fixed-positioning\" style=\"position:relative;\"><a href=\"#fixed-positioning\" aria-label=\"fixed positioning permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fixed Positioning</h2>\n<p>fixed positioning은 absolute와 비슷한데 다른 점이 containing block에 상관 없이 'viewport'에만 contained된다는 점이다. 여기에서 viewport란 화면에서 보이는 영역을 얘기하는데 보통 주소 바와 탭 바 등을 포함하ㅡㄴ window와는 약간 다르다. 이를 주로 사용하는 곳은 scroll을 해도 계속 보이게 하는 <code class=\"language-text\">Icon</code> 혹은 <code class=\"language-text\">Header</code>, <code class=\"language-text\">Modal</code>등이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.help-btn</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 32px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 32px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>help-btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  Help\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"예외\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8\" aria-label=\"예외 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외</h3>\n<p>보통 fixed elements는 viewport에 고정되는데 단 한 가지 예외가 있다.</p>\n<p>바로 부모 혹은 조상이 <code class=\"language-text\">transform</code> 혹은 <code class=\"language-text\">wil-change</code> 속성을 사용할 때이다. <code class=\"language-text\">transform</code> 혹은 <code class=\"language-text\">will-change: transform</code>를 사용한 부모 내 자식 중 fixed elements가 있으면 이를 absolutely-positioned element로 바꿔 버린다.</p>\n<p><a href=\"https://codepen.io/sundicide/pen/GRyxjGz\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/sundicide/embed/preview/GRyxjGz/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h2 id=\"overflow\" style=\"position:relative;\"><a href=\"#overflow\" aria-label=\"overflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overflow</h2>\n<p>Overflow는 contents가 넘쳤을 때 이를 어떻게 관리할 것인지에 대한 속성이다.</p>\n<p>주의 해야할 점 중 하나는 <code class=\"language-text\">overflow: scroll</code>을 지정 시 <strong>Window, Linux 에서는 항상 스크롤바가 보인다는 점이다</strong>. 그렇기 때문에 Mac OS로 개발을 하면서 overflow를 따로 설정하지 않은 개발자는 이에 유의해야 한다.</p>\n<p>Mac OS에서도 <code class=\"language-text\">overflow: scroll</code> 시 항상 스크롤바를 보려면 스크롤 막대 보기를 <code class=\"language-text\">항상</code> 으로 변경해주면 된다.</p>\n<h3 id=\"auto-vs-scroll\" style=\"position:relative;\"><a href=\"#auto-vs-scroll\" aria-label=\"auto vs scroll permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>auto vs scroll</h3>\n<p><code class=\"language-text\">overflow: auto</code>는 필요할 때 자동적으로 scrollbar를 만들어 준다. 그렇다면 왜 <code class=\"language-text\">overflow: scroll</code>을 써야 할까?</p>\n<p>그 이유는 Layout Shift, 렌더링 과정에서 scroll로 인한 layout 변경을 방지하기 위함이다. 이에 대한 내용은 아래의 블로그에서 확인 가능하다.</p>\n<p><a href=\"https://www.bram.us/2021/07/23/prevent-unwanted-layout-shifts-caused-by-scrollbars-with-the-scrollbar-gutter-css-property/\">https://www.bram.us/2021/07/23/prevent-unwanted-layout-shifts-caused-by-scrollbars-with-the-scrollbar-gutter-css-property/</a></p>\n<h3 id=\"hidden\" style=\"position:relative;\"><a href=\"#hidden\" aria-label=\"hidden permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hidden</h3>\n<p><code class=\"language-text\">overflow: hidden</code>은 넘치는 요소를 사라지게 하는 속성인데 보통은 text ellipsis(...) 혹은 미적인 효과를 위해 사용한다.</p>\n<p>hidden 속성을 지정하면 당시에는 어떤 이유로 이 속성을 지정했는지 기억하겠지만 시간이 지나면 왜 hidden 속성을 썼는지 이해하기 힘든 경우가 많다. 그래서 저자는 <code class=\"language-text\">overflow: hidden</code>을 써야 할 때면 그 위에 코멘트로 왜 이 속성을 썼는지에 대해 명시하는 것을 선호한다.</p>\n<h3 id=\"scroll-container\" style=\"position:relative;\"><a href=\"#scroll-container\" aria-label=\"scroll container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scroll Container</h3>\n<p>우리가 overflow 값을 설정하게 되면 해당 elements는 <code class=\"language-text\">scroll container</code>가 되는데 이 때 scroll이 <code class=\"language-text\">x축과 y축 모두에 생긴다</code>는 것에 유념해야 한다.</p>\n<p><a href=\"https://codepen.io/sundicide/pen/xxpWENW\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/sundicide/embed/preview/xxpWENW/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>위의 예시를 보면 y축 넘침은 <code class=\"language-text\">scroll</code>을 설정하고 x축 넘침 <code class=\"language-text\">visible</code>을 하려고 설정 했지만 <strong>x와 y축 모두에 scroll이 생겼음</strong>을 볼 수 있다.</p>\n<p>이는 scroll container 때문인데, overflow가 설정되는 순간 자식 elements들이 scroll container를 벗어나게 그려질 수 없도록 x축과 y축 모두 scroll을 만들고 자식이 <code class=\"language-text\">hidden</code> 혹은 <code class=\"language-text\">scroll</code> 될지만 선택할 수 있게 한다.</p>\n<p>한 마디로 overflow를 설정하는 순간 해당 element에는 <code class=\"language-text\">hidden</code> 혹은 <code class=\"language-text\">scroll</code>만 선택할 수 있게 된다는 것이다.</p>\n<h3 id=\"positioned-child\" style=\"position:relative;\"><a href=\"#positioned-child\" aria-label=\"positioned child permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Positioned Child</h3>\n<p>overflow를 사용할 때 자식이 positioned 된 element라면 overflow가 동작할까?</p>\n<p>답은 <strong>contained 된 child만 overflow가 동작한다</strong> 이다.</p>\n<p>자식이 <code class=\"language-text\">position: absolute;</code>를 선언하면 부모에 overflow를 설정해도 보이게 되는데 이는 absolute 선언된 child element가 closest positioned ancestor를 containing block으로 잡기 때문이다. 이를 동작하게 하기 위해서는 부모에 <code class=\"language-text\">position: relative</code>를 선언하면 된다.</p>\n<p>이와 같은 원리로 <code class=\"language-text\">position: fixed</code>를 선언한 element는 부모에 contained되지 않기 때문에 overflow가 적용되지 않는다.(위에서 fixed positioning - 예외에서 살펴 본 것처럼 부모가 <code class=\"language-text\">tranform</code> 혹은 <code class=\"language-text\">will-change: transform</code> 속성을 사용하게 되면 overflow가 적용된다.)</p>\n<h3 id=\"sticky-position\" style=\"position:relative;\"><a href=\"#sticky-position\" aria-label=\"sticky position permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sticky position</h3>\n<p>sticky position은 relative와 fixed positioning이 합쳐진 것으로 생각할 수 있다. relative element 처럼 취급이 되면서(documnet에서 normal flow를 따르고 offset을 사용할 수 있다.) fixed 처럼 parent boundary에 속하기 때문이다. 주로 alphabetized list에서 heading에 이를 많이 쓰는데 아래 MDN 문서에 example이 잘 되어있어 이를 첨부한다.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky_positioning\">https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky_positioning</a></p>\n<p>sticky position을 사용할 때 주의해야 할 점이 있는데 그 중 하나는 overflow를 설정한 조상이 있다면 그 조상에 stick된다는 점이다. sticky position은 nearest \"scrolling mechanism\" ancestor(overflow를 hidden, scroll, auto, overlay로 설정한 element)에 붙게되어 sticky가 원하는대로 동작하지 않을 수 있다는 것이다.</p>\n<p>또한 Flexbox 혹은 Grid에 의해 sticky element가 늘어났다면 sticky가 원하는 대로 동작하지 않는다.</p>\n<h2 id=\"hidden-content\" style=\"position:relative;\"><a href=\"#hidden-content\" aria-label=\"hidden content permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hidden Content</h2>\n<p>element를 어떤 목적으로 안보이게 하는 방법은 여러 가지가 있다.</p>\n<ol>\n<li>display: none</li>\n<li>visible: hidden</li>\n<li>opacity: 0</li>\n</ol>\n<p>결과는 비슷하지만 다른 점이 있다.</p>\n<p>먼저 <code class=\"language-text\">display: none;</code>의 특징은</p>\n<ul>\n<li>차지하는 영역이 없다.</li>\n<li>keyboary navigation을 이용한 Focus가 불가능하다.</li>\n</ul>\n<p>이다. 이는 주로 mobile 과 desktop 전환 시 다른 쪽의 header를 숨기고자 할 때 쓴다.</p>\n<p>은 차지하는 영역을 없애 버린다.</p>\n<p><code class=\"language-text\">visibility: hidden</code>의 특징은 다음과 같다.</p>\n<ul>\n<li>keyboary navigation을 이용한 Focus가 가능하다.</li>\n<li>부모 요소에서 <code class=\"language-text\">visibility: hidden</code>을 적용한 뒤 특정 자식 요소에서 <code class=\"language-text\">visibility: visible</code>을 설정하면 해당 요소만 보이도록 구성할 수 있다.</li>\n</ul>\n<p><code class=\"language-text\">opacity: 0</code>은 영역은 차지하지만 보이지는 않는다.</p>\n<ul>\n<li>keyboard navigation을 이용한 Focus 뿐만 아니라 click, text일 경우엔 select도 가능하다.</li>\n</ul>\n<p>그렇기 이 속성은 주로 투명효과를 주기 위해 주로 사용한다.</p>\n<p>Accessibility에서 주의를 해야 할 점은 display: none을 제외하면 Focus가 가능하기 때문에 keyboard navigation등을 이용하는 유저에게 노출되서는 안되는 요소를 노출시켜 혼란을 줄 수 있다는 점이다.</p>\n<p>help text 같이 keyboard navigattion 등을 이용하는 유저에게는 노출이 되지만 일반 유저에겐 보이지도, focus되지도 않도록 하려면 어떻게 해야 할까? 이를 위해서 저자는 아래와 같이 <code class=\"language-text\">clip</code>속성을 사용한 숨김을 선호한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token selector\">.visually-hidden</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">clip</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span>0 0 0 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> -1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>반대로 미적 효과를 위해 keyboard navigation등을 이용하는 유저에게는 숨기고 일반 유저에게만 보이도록 하고 싶을 땐 <code class=\"language-text\">aria-hidden=\"true\"</code> 속성을 사용하면 된다.</p>\n<p>여기에서 또 주의해야 할 점이 있는데 <code class=\"language-text\">aria-hidden=\"true\"</code>를 설정한 요소 내에 <code class=\"language-text\">a</code> 태그 같이 focusable한 element를 넣으면 안된다는 점이다. 이렇게 할 경우 aria-hidden을 설정해도 focus가 갈수 있기 때문이다.</p>","excerpt":"Centering Trick 특정한 조건내에서 horizontal, vertical centering을 할 수 있다. Absolute position 각 방향 별 equl distance 지정된 사이즈 margin: auto  Stacking Context z-index…","frontmatter":{"date":"28 March, 2022","path":"/blog/study/css-for-js/module-02-css-rendering-logic-2/","title":"Module 02 - CSS Rendering Logic 2"},"timeToRead":4}},"pageContext":{}},"staticQueryHashes":["2744905544","3649515864","63159454"],"slicesMap":{}}