{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/study/css-for-js/module-00-css-fundamentals/","result":{"data":{"markdownRemark":{"html":"<h2>Media Queries</h2>\n<p>여러 device들은 각각의 size를 갖는데 이에 대응하기 위해 media queries <code class=\"language-text\">@media</code>를 쓴다.\n이는 Javascript의 <code class=\"language-text\">if</code>문과 비슷한 의미이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/** */</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/** */</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>예시를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> violet<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellowgreen<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">@media</code> 뒤 괄호 안에는 <code class=\"language-text\">font-size: 16px;</code>같은 css declaration은 올 수 없고 <code class=\"language-text\">min-width</code> 같은 <code class=\"language-text\">media feature</code>만 올 수 있다.</p>\n<h2>Pseudo</h2>\n<p><code class=\"language-text\">pseudo</code>란 단어의 의미를 알아보자.</p>\n<blockquote>\n<p>not genuine; spurious or sham: we are talking about real journalists and not the pseudo kind.\n한글로는 가짜의, 가상의 란 의미로 해석된다.</p>\n</blockquote>\n<p>그렇기에 <code class=\"language-text\">pseudo-class</code> <code class=\"language-text\">pseudo-elements</code> 는 각각 가상의 클래스, 가상의 elements라고 볼 수 있다.</p>\n<p>먼저 <code class=\"language-text\">pseudo-class</code>를 알아보자.</p>\n<h3>Pseudo class</h3>\n<p>선택된 element에 special state를 나타내며 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\">MDN - Pseudo classes</a> 문서를 보면 전체 리스트를 볼 수 있다.</p>\n<p>예를 들면 마우스를 element에 올렸을 때 style을 지정할 수 있는 <code class=\"language-text\">:focus</code>가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token selector\">button:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Javascript로 이를 구현하면 event를 <code class=\"language-text\">onMouseEnter/onMouseLeave</code>를 등록해야 하지만 CSS로는 한 줄로 처리 가능하다.</p>\n<h3>Pseudo elements</h3>\n<p><code class=\"language-text\">pseudo-classes</code>와 비슷하게 element내 specific part를 선택할 수 있게 해주는 keyword로써 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\">MDN - Pseudo-elements</a> 에서 확인 가능하다.</p>\n<p>예를 들면 <code class=\"language-text\">::before</code>, <code class=\"language-text\">::after</code>가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token selector\">p::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> deeppink<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Accessibility 관점에서 주의해야 할 점이 하나 있다. 바로 <code class=\"language-text\">pseudo-elements</code>내 <code class=\"language-text\">content</code> 속성에는 값을 넣지 않는 것이 좋다는 점이다. 예를 들어 screen-reader를 사용하는 경우 <code class=\"language-text\">content</code>에 값을 넣으면 해당 내용을 소리내어 읽어 주기 때문이다.</p>\n<p>이와 관련해서는 <a href=\"https://www.w3.org/TR/css-content-3/#accessibility\">W3.org</a>에서 확인 가능하다</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements#what_is_a_pseudo-element\">MDN - Pseudo-classes and pseudo-elements</a> 에서 이 둘을 같이 다룬 내용들이 있다.</li>\n</ul>\n<h2>Color</h2>\n<p>CSS에는 색상을 다양한 방식으로 표현할 수 있다.</p>\n<ol>\n<li>keywords: red</li>\n<li>HEX codes: #FF000</li>\n<li>color: rgb(255, 0, 0)</li>\n<li>HSL: hsl(0deg, 100%, 50%)</li>\n</ol>\n<p>위의 방식 중에서 가장 직관 적인 것은 <code class=\"language-text\">keywords</code> 일 것이다. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">MDN - color_value</a>를 보면 여러 색상 값들이 존재함을 알 수 있다. 하지만 보통 디자인 시스템에서 요구하는 색깔들은 여러 색상을 정한 뒤 좀 더 밝거나 어둡게 만들어서 여러 color palette를 만들기 때문에 이런 값들만을 이용해서는 표현하기 힘들다.</p>\n<p>그렇다면 1번 방식(keywords)을 제외하고 2,3,4 방식 중에 어떤 것을 선호하는가?</p>\n<p>저자는 4번 HSL 방식을 선호한다. 예를 들어 <code class=\"language-text\">#abcdef</code> 라는 색상 값을 줬을 때 어떤 색상이 올지 알 수 있겠는가? 이를 RGB로 표현하면 <code class=\"language-text\">rgb(171, 205, 239)</code>가 된다. 이 역시 알기 힘들다. 그렇다면 HSL로 해보면 어떨까? <code class=\"language-text\">hsl(210, 68%, 80%)</code> 을 의미한다. 좀 더 알기 쉬워졌는가? 그렇지 않을 것이다. 이번엔 아래 예시를 봐보자.</p>\n<p><a href=\"https://codepen.io/sundicide/pen/oNpYwBz\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/sundicide/embed/preview/oNpYwBz/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>HSL은 위 예제에서 보듯이 앞에서부터 (hue, saturation, lightness)를 의미한다(<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl\">MDN - hsl</a>).\n그래서 위의 그림을 익혀둔다면 보다 쉽게 색상을 예측할 수 있을 것이다. 또한 saturation과 lightness를 <em>hex</em>, <em>color</em> 에 비해 쉽게 변경할 수 있다는 장점도 있다.</p>\n<p>또한 hsl은 <code class=\"language-text\">hsl(210, 68%, 80%, 0.5)</code> 같이 opacity도 설정할 수 있는데 IE에서는 <strong>hsla</strong>로 써줘야 한다. `hsla(210, 68%, 80%, 0.5)</p>\n<h2>Units</h2>\n<p>CSS 에는 여러 Unit이 있는데 그 중 가장 유명한 것은 <code class=\"language-text\">px</code> 일 것이다.</p>\n<p>참고로 <code class=\"language-text\">em</code>은 현재 element의 font size를 기준으로 상대적인 값을 가지며, <code class=\"language-text\">rem</code>은 root element(즉 <code class=\"language-text\">html</code> 태그)의 font-size를 기준으로 상대적인 값을 갖는다.</p>\n<p>그렇기 때문에 <code class=\"language-text\">em</code>을 쓰는 일은 많이 없고 <code class=\"language-text\">rem</code>을 더 많이 쓴다.</p>\n<p>여기에서 주의해야 할 점은 <code class=\"language-text\">rem</code>의 값을 바꾸기 위해 html 내 font-size를 덮어 씌우는 일은 안된다는 점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>위와 같이 설정 시 사용자가 browser에서 폰트 크기를 조절 했을 때 전혀 반영되지 않을 것이다.(20px로 고정 시켜놨기 때문)</p>\n<p>이를 해결하기 위해서는 아래와 같이 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.5em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>이로써 유저가 browser 폰트 사이즈를 키웠을 때 사이트의 전체 폰트 크기가 커질 것이다.</p>\n<blockquote>\n<p>\"'px'은 Accessibility 관점에서 좋지 않다\"</p>\n</blockquote>\n<p>라는 말을 들어본 적이 있는가?</p>\n<p>이에 대해 저자는 <strong>그렇지 않다</strong>라고 생각한다.</p>\n<p>typography는 browser font-size에 맞춰 변하는 것이 맞다고 생각하지만, 그 외에 padding이나 margin 같은 곳에서는 font-size가 커진다고 변하면 안된다고 생각하기 때문이다.(font-size가 커질 수록 padding이 커진다고 상상해봐라)</p>\n<p>그래서 저자는 typography를 제외한 곳에서는 <code class=\"language-text\">px</code>을 주로 사용한다.</p>","excerpt":"Media Queries 여러 device들은 각각의 size를 갖는데 이에 대응하기 위해 media queries 를 쓴다.\n이는 Javascript의 문과 비슷한 의미이다. 예시를 보자.  뒤 괄호 안에는 같은 css declaration…","frontmatter":{"date":"23 March, 2022","path":"/blog/study/css-for-js/module-00-css-fundamentals/","title":"Module 00 - CSS Fundamentals"},"timeToRead":2}},"pageContext":{}},"staticQueryHashes":["2744905544","3649515864","63159454"],"slicesMap":{}}