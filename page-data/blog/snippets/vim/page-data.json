{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/snippets/vim/","result":{"data":{"markdownRemark":{"html":"<h1>Find</h1>\n<h2>char &#x26; current line</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">  f -> forward\n\n  e.g.\n    fe, f)\n\n  F -> backward\n\n  ; -> 마지막 검색 명령을 정방향으로 반복\n  , -> 마지막 검색 명령을 역방향으로 반복</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>word &#x26; entire page</h2>\n<p>find next or prev word positioned at cursor</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">  # -> find next\n\n  * -> find prev</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h1>Macro</h1>\n<p>변수를 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">:let i=0\n:echo i\n&lt; 0\n\n\n:let i += 1\n:echo i\n&lt; 1</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이를 이용하면 숫자 목록을 만들 수 있다.</p>\n<p>먼저 첫 줄에 <code class=\"language-text\">1)</code>을 삽입하고 이를 매크로로 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">:let <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\nqa\nI<span class=\"token operator\">&lt;</span>C-r<span class=\"token operator\">>=</span>i<span class=\"token operator\">&lt;</span>CR<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>Esc<span class=\"token operator\">></span> <span class=\"token comment\"># 1) My Sentence</span>\n:let i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\nq</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>아래 스크립트를 이용해 나머지 행에 적용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">jVG\n<span class=\"token builtin class-name\">:</span><span class=\"token string\">'&lt;,'</span><span class=\"token operator\">></span>normal @a</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2>매크로 확인하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">:put a\n<span class=\"token comment\"># \"ap 명령으로도 붙일 수 있는데 put을 쓴 이유는 뭘까?</span>\n<span class=\"token comment\"># put 명령은 항상 현재 행 아래에 붙여넣기 때문이다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>매크로 수정하기</h2>\n<p>만약 a 레지스터에 있는 매크로를 수정하고 싶다면\n기존 매크로를 <code class=\"language-text\">:put a</code> 명령어로 붙여넣기 한 뒤\n내용을 수정하고\n<code class=\"language-text\">\"ay$</code> 같이 해당 레지스터에 새로운 매크로를 넣는다.</p>\n<h1>삭제</h1>\n<blockquote>\n<p>From Practical Vim</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>키 입력</th>\n<th>선택 범위</th>\n<th>키 입력</th>\n<th>선택 범위</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>iw</td>\n<td>단어(word)</td>\n<td>aw</td>\n<td>단어(word)와 공백</td>\n</tr>\n<tr>\n<td>iW</td>\n<td>Word</td>\n<td>aw</td>\n<td>단어(WORD)와 공백</td>\n</tr>\n<tr>\n<td>is</td>\n<td>문장</td>\n<td>aw</td>\n<td>문장과 공백</td>\n</tr>\n<tr>\n<td>ip</td>\n<td>문단</td>\n<td>aw</td>\n<td>문단과 빈행</td>\n</tr>\n</tbody>\n</table>\n<h1>마커</h1>\n<blockquote>\n<p>From Practical Vim</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>키 입력</th>\n<th>버퍼 내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>``</td>\n<td>현재 파일에서 마지막으로 이동하기 전 위치</td>\n</tr>\n<tr>\n<td>`.</td>\n<td>마지막 변경 위치</td>\n</tr>\n<tr>\n<td>`^</td>\n<td>마지막 삽입 위치</td>\n</tr>\n<tr>\n<td>`[</td>\n<td>마지막 변경 또는 복사의 시작 위치</td>\n</tr>\n<tr>\n<td>`]</td>\n<td>마지막 변경 또는 복사의 끝 위치</td>\n</tr>\n<tr>\n<td>`&#x3C;</td>\n<td>마지막 선택 영역의 시작 위치</td>\n</tr>\n<tr>\n<td>`></td>\n<td>마지막 선택 영역의 끝 위치</td>\n</tr>\n</tbody>\n</table>","excerpt":"Find char & current line word & entire page find next or prev word positioned at cursor Macro…","frontmatter":{"date":"06 August, 2021","path":"/blog/snippets/vim/","title":"Vim"},"timeToRead":1}},"pageContext":{}},"staticQueryHashes":["2744905544","3649515864","63159454"],"slicesMap":{}}