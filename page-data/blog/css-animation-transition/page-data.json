{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/css-animation-transition/","result":{"data":{"markdownRemark":{"html":"<h2>0. Preface</h2>\n<p>본 내용은 <a href=\"https://css-for-js.dev/\">https://css-for-js.dev/</a>에서 배운 내용을 개인적으로 정리한 것입니다.</p>\n<p>기본적인 내용은 제외하고 강의를 들으면서 공유하고 싶었던 부분만 담으려 합니다.\n그러므로 Animation에 대해 익숙하지 않으신분들은 내용에 이해가 어려울 수 도 있다는 점 미리 알려 드립니다.</p>\n<hr>\n<h2>1. Animation vs Transition</h2>\n<p>CSS에서 Animation을 사용하는 방법은 2가지가 있다.</p>\n<ol>\n<li>Transition</li>\n<li>Animation</li>\n</ol>\n<br />\n비슷한 듯 하지만 animation은 transition이 할 수 없는 것을 할 수 있다.\n<ol>\n<li>Loop</li>\n<li>Multi-Step</li>\n<li>Pause</li>\n<li>Page load / Page mount 시 즉시 동작</li>\n</ol>\n<p>차례대로 예시를 보자.</p>\n<h3>1-1. Loop Animation</h3>\n<p>Loop Animation이란 동일한 animation을 <code class=\"language-text\">반복</code>하는 것이다.\n아래의 예시는 애니메이션을 무한 반복 시킨 코드이다.</p>\n<p class=\"codepen\" data-height=\"300\" data-slug-hash=\"MWOrMqP\" data-user=\"sundicide\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/sundicide/pen/MWOrMqP\">\n  CSS-Loop example</a> by sundicide (<a href=\"https://codepen.io/sundicide\">@sundicide</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<br />\n<h3>1-2. Multi-Step Animation</h3>\n<p>Multi-Step Animation이란 아래의 예와 같이 <code class=\"language-text\">여러 step</code>을 두어 animation을 실행하는 것이다.\n아래의 예시는 0%, 50%, 100% 3단계의 step으로 구성했다.</p>\n<p class=\"codepen\" data-height=\"300\" data-slug-hash=\"YzEYoBW\" data-user=\"sundicide\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/sundicide/pen/YzEYoBW\">\n  CSS-Multi Step Animation</a> by sundicide (<a href=\"https://codepen.io/sundicide\">@sundicide</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<br />\n<h3>1-3. Pause</h3>\n<p>animation을 <code class=\"language-text\">pause</code> 혹은 <code class=\"language-text\">resume</code>하는 것도 Animation으로만 가능하다.\n동적으로 animation 상태를 변경하기 위해 JS를 활용해야 한다.</p>\n<p class=\"codepen\" data-height=\"300\" data-slug-hash=\"abVEeZO\" data-user=\"sundicide\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/sundicide/pen/abVEeZO\">\n  CSS-Pause Animation</a> by sundicide (<a href=\"https://codepen.io/sundicide\">@sundicide</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<br />\n<h3>1-4. Page Loads / Components mounts 시 즉시 동작</h3>\n<p>아래와 같이 없던 element가 <code class=\"language-text\">새로 생긴다</code>던가 <code class=\"language-text\">처음 페이지가 로드 됐을 시</code> 애니메이션을 적용해야할 경우 animation을 써야 한다.\n실제로는 Modal에서 쓰일 수 있다.</p>\n<p class=\"codepen\" data-height=\"300\" data-slug-hash=\"ZEavgeg\" data-user=\"sundicide\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/sundicide/pen/ZEavgeg\">\n  CSS-MountAnimation</a> by sundicide (<a href=\"https://codepen.io/sundicide\">@sundicide</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>이외에 경우에는 transition을 써도 무방하다.</p>\n<h2>2. Transition</h2>\n<p>대부분의 CSS 속성에 애니메이션을 추가해주는 역할을 한다. <br />\n여기에서 <code class=\"language-text\">대부분</code>이라고 한 이유는 모든 속성에 애니메이션을 추가할 수는 없기 때문이다. 지원하는 리스트는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties\">MDN</a>에서 확인 가능하다.</p>\n<p>transition이 많이 쓰이는 곳은 어디일까?\n개인적으로는 <code class=\"language-text\">hover</code>시 동작하는 애니메이션들이라 생각한다.</p>\n<p class=\"codepen\" data-height=\"300\" data-slug-hash=\"QWOaeZR\" data-user=\"sundicide\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/sundicide/pen/QWOaeZR\">\n  CSS-Animation-Hover</a> by sundicide (<a href=\"https://codepen.io/sundicide\">@sundicide</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>transition에서 지정할 수 있는 속성들에 대한 자세한 내용은 MDN에서 확인할 수 있다. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transition\">출처: MDN</a></p>\n<p>다만 여기에서 주의해야할 점은 <code class=\"language-text\">all</code> 사용에 주의해야 한다는 것이다.</p>\n<p>많은 모션을 추가할 수록 그만큼 브라우저에 부담을 가하는 것이며 원치 않는 요소에도 모션이 들어갈 수 있기 때문에 <code class=\"language-text\">원하는 요소</code>에만 애니메이션을 transition을 추가할 것을 권한다.</p>\n<h2>3. Animation</h2>\n<p>animation 역시 transition과 비슷하다.(둘에 대한 차이는 위에 있다.)</p>\n<p>이 역시 자세한 설명은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation\">MDN</a>에서 확인 할 것을 권한다.</p>\n<p>이 속성에 대해 얘기하고 싶은 점은 <code class=\"language-text\">direction</code>과 <code class=\"language-text\">fill-mode</code>이다.\n(play-state와 iteration-count는 차이 비교에서 설명했으니 건너뛴다.)</p>\n<h3>3-1. Direction</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction\">MDN - animation-duration</a>을 살펴보면 <code class=\"language-text\">normal</code>, <code class=\"language-text\">reverse</code>, <code class=\"language-text\">alternate</code>, <code class=\"language-text\">alternate-reverse</code> 값이 있다.</p>\n<p>normal과 reverse는 예상되는 바인데, alternate와 alternate-reverse는 뭘까? 나름 쉽게 정리를 해보자면 다음과 같다.</p>\n<blockquote>\n<p>normal => 순방향 으로 간다.(0% -> 100%) <br/></p>\n</blockquote>\n<p>reverse => 역방향으로 간다.(100% -> 0%) <br/>\nalternate => 순방향 으로 갔다가 역방향으로 간다(0% -> 100% -> 0%) <br/>\nalternate-reverse => 역방향 으로 갔다가 순방향으로 간다(100% -> 0% -> 100%)</p>\n<p>중요한 점은 여기서 끝이 아니다.<br/>\n<br/>\nalternate류는 순환을 하기 때문에 normal/reverse 보다 <code class=\"language-text\">animation-duration</code>을 <strong>절반 값</strong> 으로 설정해야 한다는 것이다.<br/>\n<br/>\n예를 들어 4초 동안 앞으로 갔다 뒤로 갔다 순환을 하기 위해 <code class=\"language-text\">animation-direction</code> 값을 <code class=\"language-text\">alternate</code>로 설정했다면 <code class=\"language-text\">animation-duration: 2s</code>로 설정해야 한다는 것이다.(순방향 2초 + 역방향 2초 = 총 4초)</p>\n<p class=\"codepen\" data-height=\"300\" data-slug-hash=\"yLPvBYe\" data-user=\"sundicide\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/sundicide/pen/yLPvBYe\">\n  Untitled</a> by sundicide (<a href=\"https://codepen.io/sundicide\">@sundicide</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h3>3-2. Fill Mode</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode\">MDN - animation-fill-mode</a></p>\n<p>이번엔 MDN예시로 먼저 설명을 하겠다.</p>\n<p>예시에는 <code class=\"language-text\">none</code>, <code class=\"language-text\">forwards</code>, <code class=\"language-text\">backwards</code>, <code class=\"language-text\">both</code> 총 4개에 대한 예시가 나와있다.<br/>\n<br/>\n봤을 때 조금씩은 다른거 같은데 어떤 차이가 있는지 설명하기 어려울 수 있다.\n이에 대한 설명을 해보자면</p>\n<ol>\n<li><code class=\"language-text\">none</code>은 <code class=\"language-text\">애니메이션 시작 전의 초기상태로 돌려 놓는다.</code> 라고 할 수 있다.</li>\n</ol>\n<p>MDN의 예시에서 원이 왼쪽에서 오른쪽으로 움직이는 애니메이션이 동작한다. 시작은 왼쪽, 종료는 오른쪽이기에 animation이 끝난 뒤에는 다시 이 원의 위치를 왼쪽으로 돌려 놓게 되는 것이다.\n2. <code class=\"language-text\">forwards</code>는 <code class=\"language-text\">애니메이션의 종료 상태로 계속 유지한다.</code> 라고 할 수 있다.\nMDN 예시에서 animation이 끝난뒤에 계속 종료상태(오른쪽으로 이동한 상태)를 유지해 계속해서 오른쪽에 남아 있는 것이다.\n3. <code class=\"language-text\">backwards</code>는 <code class=\"language-text\">애니메이션 시작 할 때부터 전의 상태를 유지한다</code> 라고 할 수 있다.<br/>\nMDN 예시에서는 차이를 찾기 힘들기 때문에 아래 예시를 첨부한다.<br/>\nrun 버튼을 눌렀을 때 <strong>default 박스</strong>는 애니메이션이 시작될 때에 사라졌다가 다시 나타나지만, <strong>backwards 박스</strong>는 애니메이션이 시작되기 전에(animation-delay 중일 때) 먼저 from 상태가 적용되고 있음을 알 수 있다.\n<p class=\"codepen\" data-height=\"350\" data-slug-hash=\"bGYLjVp\" data-user=\"sundicide\" style=\"height: 350px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n<span>See the Pen <a href=\"https://codepen.io/sundicide/pen/bGYLjVp\">\nCSS-Animation-fill_mode</a> by sundicide (<a href=\"https://codepen.io/sundicide\">@sundicide</a>)\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n4. <code class=\"language-text\">both</code>는 forwards와 backwards를 둘 다 적용하는 것을 의미한다.</p>\n<h2>4. Performance</h2>\n<p>Animation에서의 Performance는 중요하다. <br/></p>\n<p>그렇다면 <strong>좋은 Animation Performance</strong>란 무엇일까?</p>\n<blockquote>\n<p>target device / browser에서 부드럽게 동작하는 animation이다.</p>\n</blockquote>\n<p> 고성능의 device및 browser를 타겟한다면 보다 여유롭게 animation을 쓸 수 있을 것이고 반대로 저성능의 device및 browser 사용까지 고려한다면 엄격하게 animation을 사용해야 할 것이다. <br/></p>\n<p> 여기에선 Animation Performance를 2가지 측면에서 알아볼 것이다.</p>\n<ol>\n<li>CSS property</li>\n<li>H/W Acceleration</li>\n</ol>\n<h3>4-1. CSS 속성</h3>\n<p>애니메이션 성능에 유리한 CSS 속성은 무엇이 있을까?</p>\n<p>이를 위해서는 먼저 Browser가 화면 내 pixel을 업데이트 하는 프로세스부터 살펴봐야 한다.</p>\n<ol>\n<li>Recalculating style: 어느 element에 어떤 CSS를 적용해야 하는지를 찾는다.</li>\n<li>Layout: 해당 element가 page내 얼만큼의 공간을 차지하고 어디에 배치되는지 계산한다.</li>\n<li>Paint: 모든 픽셀이 어떤 색상으로 표현되어야 하는지를 알아내고, 이를 채운다.</li>\n<li>Compositing: 이전에 paint된 element들을 순서에 맞게 그린다.</li>\n</ol>\n<p>각 내용에 대한 자세한 설명은 <a href=\"https://developers.google.com/web/fundamentals/performance/rendering\">developers.google.com</a> 에서 확인 가능하다. MDN에서도 해당 내용을 확인할 수 있다. <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Performance/Scenarios/Animating_CSS_properties#css_property_cost\">MDN - CSS Property Cost</a></p>\n<p> 매 애니메이션 프레임 마다 위의 4 스텝을 전부 실행할 필요는 없다. <br/>\nlayout을 변경하면 <code class=\"language-text\">1~4 모든 스텝</code>이 실행되고 배경 이미지, 텍스트 색상등의 paint관련된 속성을 변경하면 <code class=\"language-text\">1,3,4 스텝</code>이 실행된다. 마지막으로 layout과 paint를 변경하지 않는 속성을 변경하면 <code class=\"language-text\">1,4 스텝</code>만 실행된다.</p>\n<p>1,4만 변경하는 프로세스가 가장 빠르게 동작하는데 이렇게 실행되는 CSS 속성은 <code class=\"language-text\">transform</code>과 <code class=\"language-text\">opacity</code> 이다. (크롬에서는 <code class=\"language-text\">filter</code> 속성도 추가적으로 지원한다.)</p>\n<p>그렇다면 animation에서 위에서 언급한 3개의 속성만 사용해야 할까?<br/>\n⇒ 아니다.</p>\n<ul>\n<li>예를 들어 layout의 계산이 필요한 height 속성을 변경하더라도 absolute-positioned element라면 다른 element의 layout 에 영향을 미치지 않으므로 빠른 성능을 보여준다.<br/></li>\n<li>그러므로 target device및 browser에서 만족할 만한 성능이 나오는지를 확인하고 애니메이션을 추가하는 것이 좋다.</li>\n</ul>\n<h3>4-2. 하드웨어 가속</h3>\n<p>GPU는 CPU보다 texture based animation에 좋은 성능을 보인다.<br/>\n그렇기에 CPU는 animation을 최적화 하기 위해 GPU에게 이를 맡기는데 이를 <code class=\"language-text\">Hardware Acceleration</code> 이라고 한다.<br/>\nCPU와 GPU간 전환하는 과정에서 미세한 오류를 볼 수 있는데 <a href=\"https://www.joshwcomeau.com/animation/css-transitions/#hardware-acceleration\">Joshwcomeau Blog</a>에서 확인 가능하다.<br/>\n이를 해결하기 위해서는 <code class=\"language-text\">will-change</code>속성을 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token selector\">.btn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">will-change</span><span class=\"token punctuation\">:</span> transform<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">will-change</code> 속성은 browser에게 어떤 element를 animate할 것이라고 알려주게 되며, browser는 이를 GPU에게 위임함으로서 GPU와 CPU간 전환이 발생하지 않는다. 또한 <code class=\"language-text\">will-change</code> 속성을 사용함으로써 개발자들에게도 특정 대상이 하드웨어 가속 될 것이라고 알려주는 역할도 한다.</p>\n<p>H/W 가속 역시나 항상 옳지만은 않다.\nGPU memory가 충반하지 않은 device에서의 H/W가속은 device에 부담을 주게 될 것이다.\n그렇기 때문에 모든 animation에 <code class=\"language-text\">will-change</code> 속성을 추가 하기보다 필요한 곳에만 사용하길 권한다.</p>\n<p><strong>참고 자료</strong></p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/hardware-accelerated-animations/\">https://developer.chrome.com/blog/hardware-accelerated-animations/</a></li>\n</ul>\n<h2>5. Orchestration</h2>\n<p>애니메이션을 동시에 적용하는 것보다 일정한 간격을 갖는 것이 보다 더 자연스럽다.\n예를 들면 Modal을 띄울 때 Backdrop과 Dialog가 같이 뜨는 것보다는 Backdrop이 먼저 나타나고 조금 뒤 Dialog가 떠오르는 것처럼 말이다.</p>\n<p>이를 Orchestration이라고 부른다.\n<a href=\"https://www.apple.com/\">Apple 홈페이지</a>에서도 이를 확인할 수 있는데 검색 버튼을 누르면 아래와 같은 과정이 일정한 간격을 두고 일어난다.</p>\n<ol>\n<li>메뉴 아이템들이 사라진다.</li>\n<li>Backdrop이 생긴다.</li>\n<li>하얀색의 자동 완성 영역이 나타난다.</li>\n</ol>\n<p>이런 과정을 CSS로만 구현하려면 복잡할 수 있는데 <code class=\"language-text\">React Spring</code> 혹은 <code class=\"language-text\">GSAP</code>같은 외부 라이브러리를 쓰면 보다 쉽게 구현할 수 있다.</p>\n<h2>6. Accessibility</h2>\n<p>Animation은 모든 사용자에게 동일하게 적용되지 않는다.\n특히나 복잡한 애니메이션에 어지러움과 고통을 느끼는 사람들이 있는데 이런 증상을 <code class=\"language-text\">Vestibular disorders</code>라고 부른다.</p>\n<p>최근들어 OS는 이런 사용자들을 위한 옵션을 제공하는데 Mac의 경우 <code class=\"language-text\">Reduce Motion(동작 줄이기)</code>를 제공한다.\n이 옵션을 체크하면 시스템 전반적으로 애니메이션이 줄어들게 된다.</p>\n<p>그렇기 때문에 App 개발자들도 이를 존중해야 한다. 즉, 이 옵션을 체크하는 유저를 고려해야 한다는 것이다.</p>\n<p>이 설정을 위한 media query가 존재하는데 <code class=\"language-text\">prefers-reduce-motion</code>이다. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\">MDN - Prefers Reduce Motion</a></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>45deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> transform 500ms<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-reduce-motion</span><span class=\"token punctuation\">:</span> reduce<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>기본 값은 <code class=\"language-text\">no-preference</code>이고 reduce motion을 체크한 사용자들은 해당 값이 <code class=\"language-text\">reduce</code>로 오게 된다.</p>\n<p>만약 오래된 OS 혹은 Browser에서 이 미디어 쿼리를 보게 되면 어떻게 될까? <br />\n⇒ 정답은 <code class=\"language-text\">알 수 없는 속성이므로 건너 뛴다</code> 이다.</p>\n<p>그렇기 때문에 해당 속성을 추가할 때 주의해야 한다.</p>\n<ol>\n<li>default: 일반 애니메이션 / media queries: 모션 감소 애니메이션</li>\n<li>default: 모션 감소 애니메이션 / media queries: 일반 애니메이션</li>\n</ol>\n<p>1의 경우에는 <code class=\"language-text\">Vestibular disorder</code>를 겪는 사용자가 오래된 OS 혹은 Browser를 사용할 경우 일반 애니메이션을 보여주게 되어 App을 이용하기 힘들게 할 것이다. <strong>그렇기 때문에 2번의 방법을 따르는 것이 더욱 좋다.</strong></p>\n<p>또한 Javascript에서는 아래와 같이 media query 값을 얻어올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getPrefersReducedMotion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mediaQueryList <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'(prefers-reduced-motion: no-preference)'</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> prefersReducedMotion <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>mediaQueryList<span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> prefersReducedMotion<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이를 이용하면 사용자가 reduce motion을 체크하는 즉시 반응해서 motion을 줄이는 등 dynamic한 변화를 줄 수 있다.</p>\n<p>저자가 <code class=\"language-text\">Vestibular disorders</code>를 겪는 사람들을 만나서 인터뷰해본 결과 그들이 겪는 어려움은 대체로 모션이 많이 생겼을 때 일어났다. 예를 들면 element가 급격하게 움직이거나 page 전처에 일어나는 transition 등이 있다. 그 외의 애니메이션(색깔 변경, 작은 px 움직임 등)에 대해서는 괜찮아 보였다.</p>\n<p>아래의 예시는 이를 고려한 <code class=\"language-text\">help icon</code>이다. 일반 유저에게는 일반 애니메이션(px의 움직임이 많은 motion)을 보여주고 reduce motion을 체크한 사용자에게는 보다 부담이 덜한 애니메이션을 표현하도록 했다.</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"wvPjYjQ\" data-user=\"sundicide\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/sundicide/pen/wvPjYjQ\">\n  CSS Animations - accessibiltiy help-icon</a> by sundicide (<a href=\"https://codepen.io/sundicide\">@sundicide</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<blockquote>\n<p>Accessibility관점에서 animation은 보수적으로, 너무 많은 애니메이션 보다는 목적과 이유가 있는 애니메이션을 추가하길 권한다.</p>\n</blockquote>\n<h2>7. Ends</h2>\n<p>이로써 CSS 강의 중 첫 번째로 Animation에 대해 정리해봤다.</p>\n<p>강의의 순서대로라면 후반부에 위치하는 부분이지만 개인적으로 관심이 많은 부분이기도 했고 배운것 들도 많아 첫 번째로 애니메이션을 선택 했다.</p>\n<p>이 글을 보는 이들에게도 많은 도움이 되길 바란다.</p>","excerpt":"0. Preface 본 내용은 https://css-for-js.dev/에서 배운 내용을 개인적으로 정리한 것입니다. 기본적인 내용은 제외하고 강의를 들으면서 공유하고 싶었던 부분만 담으려 합니다.\n그러므로 Animation…","frontmatter":{"date":"22 February, 2022","path":"/blog/css-animation-transition/","title":"Module 08 - CSS Animation"},"timeToRead":6}},"pageContext":{}},"staticQueryHashes":["2744905544","3649515864","63159454"],"slicesMap":{}}